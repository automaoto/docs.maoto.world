{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Latest Stable Version","text":"<p>This section contains the latest stable release API documentation.</p>"},{"location":"#maoto_agent.DATA_CHUNK_SIZE","title":"<code>DATA_CHUNK_SIZE = 1024 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"#maoto_agent.Action","title":"<code>Action(action_id, time, apikey_id, name, parameters, description, tags, cost, followup)</code>","text":"<p>               Bases: <code>NewAction</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    super().__init__(name, parameters, description, tags, cost, followup)\n    self.action_id = action_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"#maoto_agent.Actioncall","title":"<code>Actioncall(actioncall_id, apikey_id, time, action_id, post_id, parameters)</code>","text":"<p>               Bases: <code>NewActioncall</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, apikey_id: uuid.UUID, time: datetime, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    super().__init__(action_id, post_id, parameters)\n    self.apikey_id = apikey_id\n    self.actioncall_id = actioncall_id\n    self.time = time\n</code></pre>"},{"location":"#maoto_agent.ApiKey","title":"<code>ApiKey(apikey_id, time, user_id, name, roles, url=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, url: str | None = None):\n    self.apikey_id = apikey_id\n    self.time = time\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n    self.url = url\n</code></pre>"},{"location":"#maoto_agent.ApiKeyWithSecret","title":"<code>ApiKeyWithSecret(apikey_id, time, user_id, name, roles, value)</code>","text":"<p>               Bases: <code>ApiKey</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, value: str):\n    super().__init__(apikey_id, time, user_id, name, roles)\n    self.value = value\n</code></pre>"},{"location":"#maoto_agent.BidRequest","title":"<code>BidRequest(action_id, post)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post: Post):\n    self.action_id = action_id\n    self.post = post\n</code></pre>"},{"location":"#maoto_agent.BidResponse","title":"<code>BidResponse(action_id, post_id, cost)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, cost: float | None):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.cost = cost\n</code></pre>"},{"location":"#maoto_agent.File","title":"<code>File(file_id, time, apikey_id, extension)</code>","text":"<p>               Bases: <code>NewFile</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, file_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, extension: str):\n    super().__init__(extension)\n    self.file_id = file_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"#maoto_agent.HistoryElement","title":"<code>HistoryElement(history_id, role, name, text, time, apikey_id, file_ids=None, tree_id=None, parent_id=None)</code>","text":"<p>               Bases: <code>NewHistoryElement</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, history_id: uuid.UUID, role: uuid.UUID, name: str, text: str, time: datetime, apikey_id: uuid.UUID | None, file_ids: list[uuid.UUID] = None, tree_id: uuid.UUID = None, parent_id: uuid.UUID = None):\n    super().__init__(text, tree_id, parent_id, apikey_id, role, file_ids, name)\n    self.history_id = history_id\n    self.time = time\n</code></pre>"},{"location":"#maoto_agent.Location","title":"<code>Location(latitude, longitude)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, latitude: float, longitude: float):\n    self.latitude = latitude\n    self.longitude = longitude\n</code></pre>"},{"location":"#maoto_agent.Maoto","title":"<code>Maoto(logging_level=None, assistant=True, marketplace=True)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logging_level=None, assistant=True, marketplace=True):\n    # Set up logging and debug mode\n    self._debug = os.getenv(\"DEBUG\", \"False\").lower() == \"true\" or os.getenv(\"MAOTO_DEBUG\", \"False\").lower() == \"true\"\n    # Set up logging\n    self._logging_level = logging_level if logging_level else logging.DEBUG if self._debug else logging.INFO\n    logging.basicConfig(level=self._logging_level, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    self.logger = logging.getLogger(__name__)\n    # Disable INFO logs for gql and websockets\n    logging.getLogger(\"gql\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n    logging.getLogger(\"websockets\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n\n    self._domain_mp = os.environ.get(\"DOMAIN_MP\", \"mp.maoto.world\")\n    self._domain_pa = os.environ.get(\"DOMAIN_PA\", \"pa.maoto.world\")\n\n    self._use_ssl = os.environ.get(\"USE_SSL\", \"true\").lower() == \"true\"\n    self._protocol = \"https\" if self._use_ssl else \"http\"\n    self._port_mp = os.environ.get(\"PORT_MP\", \"443\" if self._use_ssl else \"80\")\n    self._port_pa = os.environ.get(\"PORT_PA\", \"443\" if self._use_ssl else \"80\")\n\n    self._url_mp = self._protocol + \"://\" + self._domain_mp + \":\" + self._port_mp + \"/graphql\"\n    self._url_pa = self._protocol + \"://\" + self._domain_pa + \":\" + self._port_pa + \"/graphql\"\n\n    self._protocol_websocket = \"wss\" if self._use_ssl else \"ws\"\n    self._url_marketplace_subscription = self._url_mp.replace(self._protocol, self._protocol_websocket)\n\n    self._apikey_value = os.environ.get(\"MAOTO_API_KEY\")\n    if self._apikey_value in [None, \"\"]:\n        raise ValueError(\"API key is required. (Set MAOTO_API_KEY environment variable)\")\n\n    self._action_cache = []\n    self._id_action_map = {}\n\n    self._handler_registry = {\n        \"Response\": None,\n        \"PaymentStatusUpdate\": None,\n        \"Actioncall\": {},\n        \"Actioncall_fallback\": None,\n        \"PaymentRequest\": None,\n        \"BidRequest\": {},\n        \"BidRequest_fallback\": None,\n\n        \"PAPaymentRequest\": None,\n        \"PALocationRequest\": None,\n        \"PAUserMessage\": None,\n    }\n\n    if assistant:\n        self._graphql_service_pa = self.GraphQLService(url=self._url_pa, apikey_value=self._apikey_value, version=get_distribution(\"maoto_agent\").version)\n\n    if marketplace:\n        self._graphql_service_mp = self.GraphQLService(url=self._url_mp, apikey_value=self._apikey_value, version=get_distribution(\"maoto_agent\").version)\n\n    self._server = self.ServerMode(self.logger, self._resolve_event, self._debug)\n    self.handle_request = self._server.graphql_app.handle_request\n</code></pre>"},{"location":"#maoto_agent.Maoto.EventDrivenQueueProcessor","title":"<code>EventDrivenQueueProcessor(logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logger: logging.Logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30):\n    self.task_queue = queue.Queue()\n    self.initial_worker_count = worker_count\n    self.max_workers = max_workers\n    self.min_workers = min_workers\n    self.scale_threshold = scale_threshold\n    self.workers = []\n    self.stop_event = threading.Event()\n    self.producer_thread = None\n    self.monitor_thread = None\n    self.completed_tasks = 0\n    self.error_count = 0\n    self.lock = threading.Lock()\n    self.last_scale_down_time = 0\n    self.scale_down_delay = scale_down_delay  # Minimum time (seconds) between scale-downs\n    self.logger = logger\n\n    atexit.register(self.cleanup)\n</code></pre>"},{"location":"#maoto_agent.Maoto.EventDrivenQueueProcessor.cleanup","title":"<code>cleanup()</code>","text":"<p>Cleanup function to ensure graceful termination.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def cleanup(self):\n    \"\"\"Cleanup function to ensure graceful termination.\"\"\"\n    self.logger.info(\"Cleaning up...\")\n\n    self.stop_event.set()\n\n    # Wait for the producer thread to finish\n    if self.producer_thread:\n        self.producer_thread.join()\n\n    # Insert poison pills to stop worker threads\n    for _ in range(len(self.workers)):\n        self.task_queue.put(None)\n\n    # Wait for all worker threads to finish\n    for worker in self.workers:\n        worker.join()\n\n    # Wait for the monitor thread to finish\n    if self.monitor_thread:\n        self.monitor_thread.join()\n\n    self.logger.info(\"All processes have been terminated gracefully.\")\n</code></pre>"},{"location":"#maoto_agent.NewAction","title":"<code>NewAction(name, parameters, description, tags, cost, followup)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    self.name = name\n    self.parameters = parameters\n    self.description = description\n    self.tags = tags\n    self.cost = cost\n    self.followup = followup\n</code></pre>"},{"location":"#maoto_agent.NewActioncall","title":"<code>NewActioncall(action_id, post_id, parameters)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.parameters = parameters\n</code></pre>"},{"location":"#maoto_agent.NewApiKey","title":"<code>NewApiKey(user_id, name, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, name: str, roles: list):\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n</code></pre>"},{"location":"#maoto_agent.NewFile","title":"<code>NewFile(extension)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, extension: str):\n    self.extension = extension\n</code></pre>"},{"location":"#maoto_agent.NewHistoryElement","title":"<code>NewHistoryElement(text, tree_id, parent_id=None, apikey_id=None, role=None, file_ids=None, name=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, text: str, tree_id: uuid.UUID, parent_id: uuid.UUID = None, apikey_id: uuid.UUID = None, role: str | None = None, file_ids: list[uuid.UUID] = None, name: str | None = None):\n    self.text = text\n    self.file_ids = file_ids if file_ids else []\n    self.tree_id = tree_id\n    self.parent_id = parent_id\n    self.apikey_id = apikey_id\n    self.role = role\n    self.name = name\n</code></pre>"},{"location":"#maoto_agent.NewPost","title":"<code>NewPost(description, context)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, description: str, context: str):\n    self.description = description\n    self.context = context\n</code></pre>"},{"location":"#maoto_agent.NewResponse","title":"<code>NewResponse(post_id, description)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, description: str):\n    self.post_id = post_id\n    self.description = description\n</code></pre>"},{"location":"#maoto_agent.NewUser","title":"<code>NewUser(username, password, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, username: str, password: str, roles: list):\n    self.username = username\n    self.password = password\n    self.roles = roles\n</code></pre>"},{"location":"#maoto_agent.PALocationRequest","title":"<code>PALocationRequest(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"#maoto_agent.PALocationResponse","title":"<code>PALocationResponse(ui_id, location)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, location: Location):\n    self.ui_id = ui_id\n    self.location = location\n</code></pre>"},{"location":"#maoto_agent.PANewConversation","title":"<code>PANewConversation(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"#maoto_agent.PAPaymentRequest","title":"<code>PAPaymentRequest(ui_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, payment_link: str):\n    self.ui_id = ui_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"#maoto_agent.PASupportRequest","title":"<code>PASupportRequest(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"#maoto_agent.PAUrl","title":"<code>PAUrl(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"#maoto_agent.PAUserMessage","title":"<code>PAUserMessage(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"#maoto_agent.PAUserResponse","title":"<code>PAUserResponse(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"#maoto_agent.PaymentRequest","title":"<code>PaymentRequest(actioncall_id, post_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, post_id: uuid.UUID, payment_link: str):\n    self.actioncall_id = actioncall_id\n    self.post_id = post_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"#maoto_agent.Post","title":"<code>Post(post_id, time, description, context, apikey_id, resolved)</code>","text":"<p>               Bases: <code>NewPost</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, time: datetime, description: str, context: str, apikey_id: uuid.UUID, resolved: bool):\n    super().__init__(description, context)\n    self.post_id = post_id\n    self.time = time\n    self.apikey_id = apikey_id\n    self.resolved = resolved\n</code></pre>"},{"location":"#maoto_agent.Response","title":"<code>Response(response_id, time, post_id, description, apikey_id=None)</code>","text":"<p>               Bases: <code>NewResponse</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, response_id: uuid.UUID, time: datetime, post_id: uuid.UUID,  description: str, apikey_id: uuid.UUID | None = None):\n    super().__init__(post_id, description)\n    self.response_id = response_id\n    self.apikey_id = apikey_id\n    self.time = time\n</code></pre>"},{"location":"#maoto_agent.Url","title":"<code>Url(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"#maoto_agent.User","title":"<code>User(user_id, time, username, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, time: datetime, username: str, roles: list):\n    self.user_id = user_id\n    self.time = time\n    self.username = username\n    self.roles = roles\n</code></pre>"},{"location":"beta/","title":"Beta Version","text":"<p>This section contains the latest beta release API documentation.</p>"},{"location":"beta/#maoto_agent.DATA_CHUNK_SIZE","title":"<code>DATA_CHUNK_SIZE = 1024 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"beta/#maoto_agent.Action","title":"<code>Action(action_id, time, apikey_id, name, parameters, description, tags, cost, followup)</code>","text":"<p>               Bases: <code>NewAction</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    super().__init__(name, parameters, description, tags, cost, followup)\n    self.action_id = action_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"beta/#maoto_agent.Actioncall","title":"<code>Actioncall(actioncall_id, apikey_id, time, action_id, post_id, parameters)</code>","text":"<p>               Bases: <code>NewActioncall</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, apikey_id: uuid.UUID, time: datetime, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    super().__init__(action_id, post_id, parameters)\n    self.apikey_id = apikey_id\n    self.actioncall_id = actioncall_id\n    self.time = time\n</code></pre>"},{"location":"beta/#maoto_agent.ApiKey","title":"<code>ApiKey(apikey_id, time, user_id, name, roles, url=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, url: str | None = None):\n    self.apikey_id = apikey_id\n    self.time = time\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n    self.url = url\n</code></pre>"},{"location":"beta/#maoto_agent.ApiKeyWithSecret","title":"<code>ApiKeyWithSecret(apikey_id, time, user_id, name, roles, value)</code>","text":"<p>               Bases: <code>ApiKey</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, value: str):\n    super().__init__(apikey_id, time, user_id, name, roles)\n    self.value = value\n</code></pre>"},{"location":"beta/#maoto_agent.BidRequest","title":"<code>BidRequest(action_id, post)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post: Post):\n    self.action_id = action_id\n    self.post = post\n</code></pre>"},{"location":"beta/#maoto_agent.BidResponse","title":"<code>BidResponse(action_id, post_id, cost)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, cost: float | None):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.cost = cost\n</code></pre>"},{"location":"beta/#maoto_agent.File","title":"<code>File(file_id, time, apikey_id, extension)</code>","text":"<p>               Bases: <code>NewFile</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, file_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, extension: str):\n    super().__init__(extension)\n    self.file_id = file_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"beta/#maoto_agent.HistoryElement","title":"<code>HistoryElement(history_id, role, name, text, time, apikey_id, file_ids=None, tree_id=None, parent_id=None)</code>","text":"<p>               Bases: <code>NewHistoryElement</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, history_id: uuid.UUID, role: uuid.UUID, name: str, text: str, time: datetime, apikey_id: uuid.UUID | None, file_ids: list[uuid.UUID] = None, tree_id: uuid.UUID = None, parent_id: uuid.UUID = None):\n    super().__init__(text, tree_id, parent_id, apikey_id, role, file_ids, name)\n    self.history_id = history_id\n    self.time = time\n</code></pre>"},{"location":"beta/#maoto_agent.Location","title":"<code>Location(latitude, longitude)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, latitude: float, longitude: float):\n    self.latitude = latitude\n    self.longitude = longitude\n</code></pre>"},{"location":"beta/#maoto_agent.Maoto","title":"<code>Maoto(logging_level=None, assistant=True, marketplace=True)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logging_level=None, assistant=True, marketplace=True):\n    # Set up logging and debug mode\n    self._debug = os.getenv(\"DEBUG\", \"False\").lower() == \"true\" or os.getenv(\"MAOTO_DEBUG\", \"False\").lower() == \"true\"\n    # Set up logging\n    self._logging_level = logging_level if logging_level else logging.DEBUG if self._debug else logging.INFO\n    logging.basicConfig(level=self._logging_level, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    self.logger = logging.getLogger(__name__)\n    # Disable INFO logs for gql and websockets\n    logging.getLogger(\"gql\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n    logging.getLogger(\"websockets\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n\n    self._domain_mp = os.environ.get(\"DOMAIN_MP\", \"mp.maoto.world\")\n    self._domain_pa = os.environ.get(\"DOMAIN_PA\", \"pa.maoto.world\")\n\n    self._use_ssl = os.environ.get(\"USE_SSL\", \"true\").lower() == \"true\"\n    self._protocol = \"https\" if self._use_ssl else \"http\"\n    self._port_mp = os.environ.get(\"PORT_MP\", \"443\" if self._use_ssl else \"80\")\n    self._port_pa = os.environ.get(\"PORT_PA\", \"443\" if self._use_ssl else \"80\")\n\n    self._url_mp = self._protocol + \"://\" + self._domain_mp + \":\" + self._port_mp + \"/graphql\"\n    self._url_pa = self._protocol + \"://\" + self._domain_pa + \":\" + self._port_pa + \"/graphql\"\n\n    self._protocol_websocket = \"wss\" if self._use_ssl else \"ws\"\n    self._url_marketplace_subscription = self._url_mp.replace(self._protocol, self._protocol_websocket)\n\n    self._apikey_value = os.environ.get(\"MAOTO_API_KEY\")\n    if self._apikey_value in [None, \"\"]:\n        raise ValueError(\"API key is required. (Set MAOTO_API_KEY environment variable)\")\n\n    self._action_cache = []\n    self._id_action_map = {}\n\n    self._handler_registry = {\n        \"Response\": None,\n        \"PaymentStatusUpdate\": None,\n        \"Actioncall\": {},\n        \"Actioncall_fallback\": None,\n        \"PaymentRequest\": None,\n        \"BidRequest\": {},\n        \"BidRequest_fallback\": None,\n\n        \"PAPaymentRequest\": None,\n        \"PALocationRequest\": None,\n        \"PAUserMessage\": None,\n    }\n\n    if assistant:\n        self._graphql_service_pa = self.GraphQLService(url=self._url_pa, apikey_value=self._apikey_value, version=get_distribution(\"maoto_agent\").version)\n\n    if marketplace:\n        self._graphql_service_mp = self.GraphQLService(url=self._url_mp, apikey_value=self._apikey_value, version=get_distribution(\"maoto_agent\").version)\n\n    self._server = self.ServerMode(self.logger, self._resolve_event, self._debug)\n    self.handle_request = self._server.graphql_app.handle_request\n</code></pre>"},{"location":"beta/#maoto_agent.Maoto.EventDrivenQueueProcessor","title":"<code>EventDrivenQueueProcessor(logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logger: logging.Logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30):\n    self.task_queue = queue.Queue()\n    self.initial_worker_count = worker_count\n    self.max_workers = max_workers\n    self.min_workers = min_workers\n    self.scale_threshold = scale_threshold\n    self.workers = []\n    self.stop_event = threading.Event()\n    self.producer_thread = None\n    self.monitor_thread = None\n    self.completed_tasks = 0\n    self.error_count = 0\n    self.lock = threading.Lock()\n    self.last_scale_down_time = 0\n    self.scale_down_delay = scale_down_delay  # Minimum time (seconds) between scale-downs\n    self.logger = logger\n\n    atexit.register(self.cleanup)\n</code></pre>"},{"location":"beta/#maoto_agent.Maoto.EventDrivenQueueProcessor.cleanup","title":"<code>cleanup()</code>","text":"<p>Cleanup function to ensure graceful termination.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def cleanup(self):\n    \"\"\"Cleanup function to ensure graceful termination.\"\"\"\n    self.logger.info(\"Cleaning up...\")\n\n    self.stop_event.set()\n\n    # Wait for the producer thread to finish\n    if self.producer_thread:\n        self.producer_thread.join()\n\n    # Insert poison pills to stop worker threads\n    for _ in range(len(self.workers)):\n        self.task_queue.put(None)\n\n    # Wait for all worker threads to finish\n    for worker in self.workers:\n        worker.join()\n\n    # Wait for the monitor thread to finish\n    if self.monitor_thread:\n        self.monitor_thread.join()\n\n    self.logger.info(\"All processes have been terminated gracefully.\")\n</code></pre>"},{"location":"beta/#maoto_agent.NewAction","title":"<code>NewAction(name, parameters, description, tags, cost, followup)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    self.name = name\n    self.parameters = parameters\n    self.description = description\n    self.tags = tags\n    self.cost = cost\n    self.followup = followup\n</code></pre>"},{"location":"beta/#maoto_agent.NewActioncall","title":"<code>NewActioncall(action_id, post_id, parameters)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.parameters = parameters\n</code></pre>"},{"location":"beta/#maoto_agent.NewApiKey","title":"<code>NewApiKey(user_id, name, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, name: str, roles: list):\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n</code></pre>"},{"location":"beta/#maoto_agent.NewFile","title":"<code>NewFile(extension)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, extension: str):\n    self.extension = extension\n</code></pre>"},{"location":"beta/#maoto_agent.NewHistoryElement","title":"<code>NewHistoryElement(text, tree_id, parent_id=None, apikey_id=None, role=None, file_ids=None, name=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, text: str, tree_id: uuid.UUID, parent_id: uuid.UUID = None, apikey_id: uuid.UUID = None, role: str | None = None, file_ids: list[uuid.UUID] = None, name: str | None = None):\n    self.text = text\n    self.file_ids = file_ids if file_ids else []\n    self.tree_id = tree_id\n    self.parent_id = parent_id\n    self.apikey_id = apikey_id\n    self.role = role\n    self.name = name\n</code></pre>"},{"location":"beta/#maoto_agent.NewPost","title":"<code>NewPost(description, context)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, description: str, context: str):\n    self.description = description\n    self.context = context\n</code></pre>"},{"location":"beta/#maoto_agent.NewResponse","title":"<code>NewResponse(post_id, description)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, description: str):\n    self.post_id = post_id\n    self.description = description\n</code></pre>"},{"location":"beta/#maoto_agent.NewUser","title":"<code>NewUser(username, password, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, username: str, password: str, roles: list):\n    self.username = username\n    self.password = password\n    self.roles = roles\n</code></pre>"},{"location":"beta/#maoto_agent.PALocationRequest","title":"<code>PALocationRequest(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"beta/#maoto_agent.PALocationResponse","title":"<code>PALocationResponse(ui_id, location)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, location: Location):\n    self.ui_id = ui_id\n    self.location = location\n</code></pre>"},{"location":"beta/#maoto_agent.PANewConversation","title":"<code>PANewConversation(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"beta/#maoto_agent.PAPaymentRequest","title":"<code>PAPaymentRequest(ui_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, payment_link: str):\n    self.ui_id = ui_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"beta/#maoto_agent.PASupportRequest","title":"<code>PASupportRequest(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"beta/#maoto_agent.PAUrl","title":"<code>PAUrl(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"beta/#maoto_agent.PAUserMessage","title":"<code>PAUserMessage(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"beta/#maoto_agent.PAUserResponse","title":"<code>PAUserResponse(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"beta/#maoto_agent.PaymentRequest","title":"<code>PaymentRequest(actioncall_id, post_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, post_id: uuid.UUID, payment_link: str):\n    self.actioncall_id = actioncall_id\n    self.post_id = post_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"beta/#maoto_agent.Post","title":"<code>Post(post_id, time, description, context, apikey_id, resolved)</code>","text":"<p>               Bases: <code>NewPost</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, time: datetime, description: str, context: str, apikey_id: uuid.UUID, resolved: bool):\n    super().__init__(description, context)\n    self.post_id = post_id\n    self.time = time\n    self.apikey_id = apikey_id\n    self.resolved = resolved\n</code></pre>"},{"location":"beta/#maoto_agent.Response","title":"<code>Response(response_id, time, post_id, description, apikey_id=None)</code>","text":"<p>               Bases: <code>NewResponse</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, response_id: uuid.UUID, time: datetime, post_id: uuid.UUID,  description: str, apikey_id: uuid.UUID | None = None):\n    super().__init__(post_id, description)\n    self.response_id = response_id\n    self.apikey_id = apikey_id\n    self.time = time\n</code></pre>"},{"location":"beta/#maoto_agent.Url","title":"<code>Url(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"beta/#maoto_agent.User","title":"<code>User(user_id, time, username, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, time: datetime, username: str, roles: list):\n    self.user_id = user_id\n    self.time = time\n    self.username = username\n    self.roles = roles\n</code></pre>"}]}