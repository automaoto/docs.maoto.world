{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to <code>maoto-agent</code> Package","text":"<p>\ud83d\udcd8 Go to Package Documentation \u2192</p> <p>\ud83d\udc49 Checkout the full User Guide here</p>"},{"location":"beta/api/","title":"Beta Version","text":"<p>This section contains the latest beta release API documentation.</p>"},{"location":"beta/api/#maoto_agent.DATA_CHUNK_SIZE","title":"<code>DATA_CHUNK_SIZE = 1024 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"beta/api/#maoto_agent.Action","title":"<code>Action(action_id, time, apikey_id, name, parameters, description, tags, cost, followup)</code>","text":"<p>               Bases: <code>NewAction</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    super().__init__(name, parameters, description, tags, cost, followup)\n    self.action_id = action_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"beta/api/#maoto_agent.Actioncall","title":"<code>Actioncall(actioncall_id, apikey_id, time, action_id, post_id, parameters)</code>","text":"<p>               Bases: <code>NewActioncall</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, apikey_id: uuid.UUID, time: datetime, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    super().__init__(action_id, post_id, parameters)\n    self.apikey_id = apikey_id\n    self.actioncall_id = actioncall_id\n    self.time = time\n</code></pre>"},{"location":"beta/api/#maoto_agent.ApiKey","title":"<code>ApiKey(apikey_id, time, user_id, name, roles, url=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, url: str | None = None):\n    self.apikey_id = apikey_id\n    self.time = time\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n    self.url = url\n</code></pre>"},{"location":"beta/api/#maoto_agent.ApiKeyWithSecret","title":"<code>ApiKeyWithSecret(apikey_id, time, user_id, name, roles, value)</code>","text":"<p>               Bases: <code>ApiKey</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, value: str):\n    super().__init__(apikey_id, time, user_id, name, roles)\n    self.value = value\n</code></pre>"},{"location":"beta/api/#maoto_agent.BidRequest","title":"<code>BidRequest(action_id, post)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post: Post):\n    self.action_id = action_id\n    self.post = post\n</code></pre>"},{"location":"beta/api/#maoto_agent.BidResponse","title":"<code>BidResponse(action_id, post_id, cost)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, cost: float):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.cost = cost\n</code></pre>"},{"location":"beta/api/#maoto_agent.File","title":"<code>File(file_id, time, apikey_id, extension)</code>","text":"<p>               Bases: <code>NewFile</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, file_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, extension: str):\n    super().__init__(extension)\n    self.file_id = file_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"beta/api/#maoto_agent.HistoryElement","title":"<code>HistoryElement(history_id, role, name, text, time, apikey_id, file_ids=None, tree_id=None, parent_id=None)</code>","text":"<p>               Bases: <code>NewHistoryElement</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, history_id: uuid.UUID, role: uuid.UUID, name: str, text: str, time: datetime, apikey_id: uuid.UUID | None, file_ids: list[uuid.UUID] = None, tree_id: uuid.UUID = None, parent_id: uuid.UUID = None):\n    super().__init__(text, tree_id, parent_id, apikey_id, role, file_ids, name)\n    self.history_id = history_id\n    self.time = time\n</code></pre>"},{"location":"beta/api/#maoto_agent.Location","title":"<code>Location(latitude, longitude)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, latitude: float, longitude: float):\n    self.latitude = latitude\n    self.longitude = longitude\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto","title":"<code>Maoto(logging_level=None, connection_mode='nat', db_connection=False)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logging_level=None, connection_mode: str = \"nat\", db_connection=False):\n    # Set up logging and debug mode\n    self._debug = os.getenv(\"DEBUG\", \"False\").lower() == \"true\" or os.getenv(\"MAOTO_DEBUG\", \"False\").lower() == \"true\"\n    # Set up logging\n    self._logging_level = logging_level if logging_level else logging.DEBUG if self._debug else logging.INFO\n    logging.basicConfig(level=self._logging_level, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    self.logger = logging.getLogger(__name__)\n    # Disable INFO logs for gql and websockets\n    logging.getLogger(\"gql\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n    logging.getLogger(\"websockets\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n\n    self._db_connection = db_connection\n    self._db_connection_pool = None\n    if self._db_connection:\n        # Environment variables for database connection\n        self._db_hostname = os.getenv(\"POSTGRES_HOST\")\n        self._db_name = os.getenv(\"POSTGRES_DB\")\n        self._db_username = os.getenv(\"POSTGRES_USER\")\n        self._db_user_password = os.getenv(\"POSTGRES_PASSWORD\")\n        self._db_port = os.getenv(\"POSTGRES_PORT\")\n\n        # Validate that all required env variables are set\n        if not all([self._db_hostname, self._db_name, self._db_username, self._db_user_password, self._db_port]):\n            raise EnvironmentError(\n                \"POSTGRES_HOST, POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD, and POSTGRES_PORT must be set\"\n            )\n\n        # Construct the PostgreSQL connection URL\n        self._database_url = (\n            f\"postgresql+asyncpg://{self._db_username}:{self._db_user_password}\"\n            f\"@{self._db_hostname}:{self._db_port}/{self._db_name}\"\n        )\n\n        # Create a connection pool\n        self._db_connection_pool = databases.Database(self._database_url)\n\n    self._schema = gql_server(\"\"\"\n        directive @auth on FIELD_DEFINITION\n\n        scalar Datetime\n        scalar JSON\n\n        input Actioncall {\n            actioncall_id: ID!\n            action_id: ID!\n            post_id: ID!\n            apikey_id: ID!\n            parameters: JSON\n            time: Datetime!\n        }\n\n        input Response {\n            response_id: ID!\n            post_id: ID!\n            description: String!\n            apikey_id: ID\n            time: Datetime!\n        }\n\n        input Post {\n            post_id: ID!\n            description: String!\n            context: String!\n            apikey_id: ID!\n            time: Datetime!\n            resolved: Boolean!\n        }\n\n        input BidRequest {\n            action_id: ID\n            post: Post\n        }\n\n        input PaymentRequest {\n            actioncall_id: ID\n            post_id: ID\n            payment_link: String\n        }\n\n        input Location {\n            latitude: Float\n            longitude: Float\n        }\n\n        input PALocationRequest {\n            ui_id: String\n        }\n\n        input PALocationResponse {\n            ui_id: String\n            location: Location\n        }\n\n        input PAUserMessage {\n            ui_id: String\n            text: String\n        }\n\n        input PAUserResponse {\n            ui_id: String\n            text: String\n        }\n\n        input PAPaymentRequest {\n            ui_id: String\n            payment_link: String\n        }\n\n        input PANewConversation {\n            ui_id: String\n        }\n\n        input PAUrl {\n            url: String                \n        }\n\n        type Query {\n            _dummy: String\n        }\n\n        type Mutation {\n            forwardActioncalls(actioncalls: [Actioncall!]!): [Boolean!]! @auth\n            forwardResponses(responses: [Response!]!): [Boolean!]! @auth\n            forwardBidRequests(bidrequests: [BidRequest!]!): [Boolean!]! @auth\n            forwardPaymentRequests(paymentrequests: [PaymentRequest!]!): [Boolean!]! @auth\n\n            forwardPALocationResponses(pa_locationresponses: [PALocationResponse!]!): [Boolean!]! @auth\n            forwardPALocationRequests(pa_locationrequests: [PALocationRequest!]!): [Boolean!]! @auth\n            forwardPAUserMessages(pa_usermessages: [PAUserMessage!]!): [Boolean!]! @auth\n            forwardPAUserResponses(pa_userresponses: [PAUserResponse!]!): [Boolean!]! @auth\n            forwardPAPaymentRequests(pa_paymentrequests: [PAPaymentRequest!]!): [Boolean!]! @auth\n            forwardPANewConversations(pa_newconversations: [PANewConversation!]!): [Boolean!]! @auth \n            forwardPAUrls(pa_urls: [PAUrl!]!): [Boolean!]! @auth          \n        }\n        \"\"\")\n\n    self.domain_mp = os.environ.get(\"DOMAIN_MP\", \"mp.maoto.world\")\n    self.domain_pa = os.environ.get(\"DOMAIN_PA\", \"pa.maoto.world\")\n\n    self._use_ssl = os.environ.get(\"USE_SSL\", \"true\").lower() == \"true\"\n    self._protocol = \"https\" if self._use_ssl else \"http\"\n    self._port_mp = os.environ.get(\"PORT_MP\", \"443\" if self._use_ssl else \"80\")\n    self._port_pa = os.environ.get(\"PORT_PA\", \"443\" if self._use_ssl else \"80\")\n\n    self._url_mp = self._protocol + \"://\" + self.domain_mp + \":\" + self._port_mp + \"/graphql\"\n    self._url_pa = self._protocol + \"://\" + self.domain_pa + \":\" + self._port_pa + \"/graphql\"\n\n    self._protocol_websocket = \"wss\" if self._use_ssl else \"ws\"\n    self._url_marketplace_subscription = self._url_mp.replace(self._protocol, self._protocol_websocket)\n\n    self._apikey_value = os.environ.get(\"MAOTO_API_KEY\")\n    if self._apikey_value in [None, \"\"]:\n        raise ValueError(\"API key is required. (Set MAOTO_API_KEY environment variable)\")\n\n\n    self._action_cache = []\n    self._id_action_map = {}\n\n    self._map_obj_to_handler_in_registry = {\n        Response: \"Response\",\n        Actioncall: \"Actioncall\",\n        BidRequest: \"BidRequest\",\n        PaymentRequest: \"PaymentRequest\",\n\n        PAPaymentRequest: \"PAPaymentRequest\",\n        PALocationRequest: \"PALocationRequest\",\n        PAUserMessage: \"PAUserMessage\",\n\n        PALocationResponse: \"PALocationResponse\",\n        PAUserResponse: \"PAUserResponse\",\n        PANewConversation: \"PANewConversation\",\n        PAUrl: \"PAUrl\",\n    }\n\n    self._handler_registry = {\n        \"CustomStartup\": None,\n        \"CustomShutdown\": None,\n\n        \"Response\": None,\n        \"Actioncall\": {},\n        \"Actioncall_fallback\": None,\n        \"PaymentRequest\": None,\n        \"BidRequest\": {},\n        \"BidRequest_fallback\": None,\n\n        \"PAPaymentRequest\": None,\n        \"PALocationResponse\": None,\n        \"PALocationRequest\": None,\n        \"PAUserMessage\": None,\n        \"PAUserResponse\": None,\n        \"PANewConversation\": None,\n        \"PAUrl\": None,\n    }\n\n    self._connection_mode = connection_mode\n    if self._connection_mode not in [\"marketplace\", \"no_nat\", \"nat\", \"closed\"]:\n        raise ValueError(\"Invalid connection mode.\")\n\n    # CLient to send messages to ui and personal assistant\n    self._graphql_service = self.GraphQLService(self, self._apikey_value)\n\n    # to send messages to marketplace\n    if self._connection_mode != \"closed\":\n        transport = AIOHTTPTransport(\n            url=self._url_mp,\n            headers={\"Authorization\": self._apikey_value},\n        )\n        self.client = Client(transport=transport, fetch_schema_from_transport=True)\n\n    if self._connection_mode == \"nat\":\n        self.server = self.EventDrivenQueueProcessor(self.logger, worker_count=1, scale_threshold=10, outer_class=self)\n    if self._connection_mode == \"no_nat\":\n        self.server = self.ServerMode(self.logger, self)\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.EventDrivenQueueProcessor","title":"<code>EventDrivenQueueProcessor(logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30, outer_class=None)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30, outer_class=None):\n    self.outer_class = outer_class\n    self.task_queue = queue.Queue()\n    self.initial_worker_count = worker_count\n    self.max_workers = max_workers\n    self.min_workers = min_workers\n    self.scale_threshold = scale_threshold\n    self.workers = []\n    self.stop_event = threading.Event()\n    self.producer_thread = None\n    self.monitor_thread = None\n    self.completed_tasks = 0\n    self.error_count = 0\n    self.lock = threading.Lock()\n    self.last_scale_down_time = 0\n    self.scale_down_delay = scale_down_delay  # Minimum time (seconds) between scale-downs\n    self.logger = logger\n\n    atexit.register(self.cleanup)\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.EventDrivenQueueProcessor.cleanup","title":"<code>cleanup()</code>","text":"<p>Cleanup function to ensure graceful termination.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def cleanup(self):\n    \"\"\"Cleanup function to ensure graceful termination.\"\"\"\n    self.logger.info(\"Cleaning up...\")\n\n    self.stop_event.set()\n\n    # Wait for the producer thread to finish\n    if self.producer_thread:\n        self.producer_thread.join()\n\n    # Insert poison pills to stop worker threads\n    for _ in range(len(self.workers)):\n        self.task_queue.put(None)\n\n    # Wait for all worker threads to finish\n    for worker in self.workers:\n        worker.join()\n\n    # Wait for the monitor thread to finish\n    if self.monitor_thread:\n        self.monitor_thread.join()\n\n    if self.outer_class:\n        if self.outer_class._at_shutdown:\n            asyncio.run(self.outer_class._at_shutdown())\n\n    self.logger.info(\"All processes have been terminated gracefully.\")\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.ServerMode","title":"<code>ServerMode(logger, outer_class=None)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logger, outer_class=None):\n    self.logger = logger\n    self.outer_class = outer_class\n\n    # Resolver functions\n    self.query = QueryType()\n    self.mutation = MutationType()\n    self.subscription = SubscriptionType()\n\n    self.datetime_scalar = ScalarType(\"Datetime\")\n    @self.datetime_scalar.serializer\n    def serialize_datetime(value: datetime) -&gt; str:\n        return value.isoformat()\n    @self.datetime_scalar.value_parser\n    def parse_datetime_value(value: str) -&gt; datetime:\n        return parser.parse(value)\n\n    self.json_scalar = ScalarType(\"JSON\")\n    @self.json_scalar.serializer\n    def serialize_json(value: dict) -&gt; str:\n        return json.dumps(value)\n    @self.json_scalar.value_parser\n    def parse_json_value(value: str) -&gt; dict:\n        return json.loads(value)\n\n    @self.mutation.field(\"forwardActioncalls\")\n    async def forward_actioncalls(_, info, actioncalls: list[dict[str, object]]) -&gt; list[bool]:\n        actioncalls = [Actioncall(\n            actioncall_id=uuid.UUID(actioncall[\"actioncall_id\"]),\n            apikey_id=uuid.UUID(actioncall[\"apikey_id\"]),\n            time=datetime.fromisoformat(actioncall[\"time\"]),\n            action_id=uuid.UUID(actioncall[\"action_id\"]),\n            post_id=uuid.UUID(actioncall[\"post_id\"]),\n            parameters=actioncall[\"parameters\"],\n        ) for actioncall in actioncalls]\n\n        status = []\n        for actioncall in actioncalls:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(actioncall, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving actioncall: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardResponses\")\n    async def forward_responses(_, info, responses: list[dict[str, object]]) -&gt; list[bool]:\n        responses = [Response(\n            response_id=uuid.UUID(response[\"response_id\"]),\n            post_id=uuid.UUID(response[\"post_id\"]),\n            description=response[\"description\"],\n            apikey_id=uuid.UUID(response[\"apikey_id\"]) if \"apikey_id\" in response else None, #TODO why is this not send as None?\n            time=response[\"time\"],\n        ) for response in responses]\n\n        status = []\n        for response in responses:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(response, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving response: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardBidRequests\")\n    async def forward_bidrequests(_, info, bidrequests: list[dict[str, object]]) -&gt; list[bool]:\n        bidrequests = [BidRequest(\n            action_id=bidrequest[\"action_id\"],\n            post=Post(\n                post_id=uuid.UUID(bidrequest[\"post\"][\"post_id\"]),\n                description=bidrequest[\"post\"][\"description\"],\n                context=bidrequest[\"post\"][\"context\"],\n                apikey_id=uuid.UUID(bidrequest[\"post\"][\"apikey_id\"]),\n                time=datetime.fromisoformat(bidrequest[\"post\"][\"time\"]),\n                resolved=bidrequest[\"post\"][\"resolved\"],\n            )\n        ) for bidrequest in bidrequests]\n\n        status = []\n        for bidrequest in bidrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(bidrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving bid request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPaymentRequests\")\n    async def forward_paymentrequests(_, info, paymentrequests: list[dict[str, object]]) -&gt; list[bool]:\n        paymentrequests = [PaymentRequest(\n            actioncall_id=uuid.UUID(paymentrequest[\"actioncall_id\"]),\n            post_id=uuid.UUID(paymentrequest[\"post_id\"]),\n            payment_link=paymentrequest[\"payment_link\"],\n        ) for paymentrequest in paymentrequests]\n\n        status = []\n        for paymentrequest in paymentrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(paymentrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving payment request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAPaymentRequests\")\n    async def forward_paymentrequests(_, info, pa_paymentrequests: list[dict[str, object]]) -&gt; list[bool]:\n        paymentrequests = [PAPaymentRequest(\n            ui_id=pa_paymentrequest[\"ui_id\"],\n            payment_link=pa_paymentrequest[\"payment_link\"],\n        ) for pa_paymentrequest in pa_paymentrequests]\n\n        status = []\n        for paymentrequest in paymentrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(paymentrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving payment request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPALocationResponses\")\n    async def forward_locationresponses(_, info, pa_locationresponses: list[dict[str, object]]) -&gt; list[bool]:\n        locationresponses = [PALocationResponse(\n            ui_id=pa_locationresponse[\"ui_id\"],\n            location=Location(\n                latitude=pa_locationresponse[\"location\"][\"latitude\"],\n                longitude=pa_locationresponse[\"location\"][\"longitude\"],\n            )\n        ) for pa_locationresponse in pa_locationresponses]\n\n        status = []\n        for locationresponse in locationresponses:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(locationresponse, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving location response: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPALocationRequests\")\n    async def forward_locationrequests(_, info, pa_locationrequests: list[dict[str, object]]) -&gt; list[bool]:\n        locationrequests = [PALocationRequest(\n            ui_id=pa_locationrequest[\"ui_id\"],\n        ) for pa_locationrequest in pa_locationrequests]\n\n        status = []\n        for locationrequest in locationrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(locationrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving location request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAUserMessages\")\n    async def forward_usermessages(_, info, pa_usermessages: list[dict[str, object]]) -&gt; list[bool]:\n        usermessages = [PAUserMessage(\n            ui_id=pa_usermessage[\"ui_id\"],\n            text=pa_usermessage[\"text\"],\n        ) for pa_usermessage in pa_usermessages]\n\n        status = []\n        for usermessage in usermessages:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(usermessage, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving user message: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAUserResponses\")\n    async def forward_userresponses(_, info, pa_userresponses: list[dict[str, object]]) -&gt; list[bool]:\n        userresponses = [PAUserResponse(\n            ui_id=pa_userresponse[\"ui_id\"],\n            text=pa_userresponse[\"text\"],\n        ) for pa_userresponse in pa_userresponses]\n\n        status = []\n        for userresponse in userresponses:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(userresponse, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving user response: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPANewConversations\")\n    async def forward_newconversations(_, info, pa_newconversations: list[dict[str, object]]) -&gt; list[bool]:\n        newconversations = [PANewConversation(\n            ui_id=pa_newconversation[\"ui_id\"],\n        ) for pa_newconversation in pa_newconversations]\n\n        status = []\n        for newconversation in newconversations:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(newconversation, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving new conversation: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAUrls\")\n    async def forward_paurl(_, info, pa_urls: list[dict[str, object]]) -&gt; list[bool]:\n        urls = [PAUrl(\n            url=pa_url[\"url\"],\n        ) for pa_url in pa_urls]\n\n        status = []\n        for url in urls:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(url, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving url: {e}\")\n                status.append(False)\n\n        return status\n\n    self.AuthDirective.configure(logger=self.logger, fetch_all=self.outer_class.fetch_all)\n\n    # Create the executable schema\n    self.schema = make_executable_schema(self.outer_class._schema, self.query, self.mutation, self.datetime_scalar, self.json_scalar, directives={\"auth\": self.AuthDirective})\n\n    self.graphql_app = GraphQL(\n        self.schema, \n        debug=self.outer_class._debug,\n    )\n\n    async def health_check(request):\n        return JSONResponse({\"status\": \"ok\"})\n\n    self.routes=[\n        Route(\"/graphql\", self.graphql_app.handle_request, methods=[\"GET\", \"POST\", \"OPTIONS\"]),\n        Route(\"/healthz\", health_check, methods=[\"GET\"]),\n    ]\n\n    self.middleware = [\n        Middleware(\n            TrustedHostMiddleware,\n            allowed_hosts=['maoto.world', '*.maoto.world', 'localhost', '*.svc.cluster.local', '*.amazonaws.com', '*.ngrok.app', '*.ngrok-free.app']\n        ),\n    ]\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.ServerMode.shutdown","title":"<code>shutdown()</code>  <code>async</code>","text":"<p>Actions to perform on application shutdown.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def shutdown(self):\n    \"\"\"\n    Actions to perform on application shutdown.\n    \"\"\"\n\n    if self.outer_class:\n        if self.outer_class._at_shutdown:\n            await self.outer_class._at_shutdown()\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.ServerMode.startup","title":"<code>startup()</code>  <code>async</code>","text":"<p>Actions to perform on application startup.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def startup(self):\n    \"\"\"\n    Actions to perform on application startup.\n    \"\"\"\n\n    if self.outer_class:\n        if self.outer_class._at_startup:\n            await self.outer_class._at_startup()\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.execute","title":"<code>execute(query, values=None)</code>  <code>async</code>","text":"<p>Execute an INSERT, UPDATE, or DELETE statement.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def execute(self, query, values=None):\n    \"\"\"Execute an INSERT, UPDATE, or DELETE statement.\"\"\"\n    try:\n        return await self._db_connection_pool.execute(query=query, values=values)\n    except asyncpg.exceptions.PostgresError as e:\n        self.logger.error(\"Database execution error: %s\", e)\n        raise GraphQLError(\"Database execution error.\")\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.fetch_all","title":"<code>fetch_all(query, values=None)</code>  <code>async</code>","text":"<p>Fetch multiple records from the database.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def fetch_all(self, query, values=None):\n    \"\"\"Fetch multiple records from the database.\"\"\"\n    try:\n        return await self._db_connection_pool.fetch_all(query=query, values=values)\n    except asyncpg.exceptions.PostgresError as e:\n        self.logger.error(\"Database error: %s\", e)\n        raise GraphQLError(\"Database error occurred.\")\n</code></pre>"},{"location":"beta/api/#maoto_agent.Maoto.transaction","title":"<code>transaction()</code>  <code>async</code>","text":"<p>Return an async context manager so that <code>async with agent.transaction(): ...</code> works.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>@asynccontextmanager\nasync def transaction(self):\n    \"\"\"\n    Return an async context manager so that\n    `async with agent.transaction(): ...` works.\n    \"\"\"\n    async with self._db_connection_pool.transaction():\n        # You can do any setup here if needed\n        yield\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewAction","title":"<code>NewAction(name, parameters, description, tags, cost, followup)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    self.name = name\n    self.parameters = parameters\n    self.description = description\n    self.tags = tags\n    self.cost = cost\n    self.followup = followup\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewActioncall","title":"<code>NewActioncall(action_id, post_id, parameters)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.parameters = parameters\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewApiKey","title":"<code>NewApiKey(user_id, name, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, name: str, roles: list):\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewFile","title":"<code>NewFile(extension)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, extension: str):\n    self.extension = extension\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewHistoryElement","title":"<code>NewHistoryElement(text, tree_id, parent_id=None, apikey_id=None, role=None, file_ids=None, name=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, text: str, tree_id: uuid.UUID, parent_id: uuid.UUID = None, apikey_id: uuid.UUID = None, role: str | None = None, file_ids: list[uuid.UUID] = None, name: str | None = None):\n    self.text = text\n    self.file_ids = file_ids if file_ids else []\n    self.tree_id = tree_id\n    self.parent_id = parent_id\n    self.apikey_id = apikey_id\n    self.role = role\n    self.name = name\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewPost","title":"<code>NewPost(description, context)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, description: str, context: str):\n    self.description = description\n    self.context = context\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewResponse","title":"<code>NewResponse(post_id, description)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, description: str):\n    self.post_id = post_id\n    self.description = description\n</code></pre>"},{"location":"beta/api/#maoto_agent.NewUser","title":"<code>NewUser(username, password, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, username: str, password: str, roles: list):\n    self.username = username\n    self.password = password\n    self.roles = roles\n</code></pre>"},{"location":"beta/api/#maoto_agent.PALocationRequest","title":"<code>PALocationRequest(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"beta/api/#maoto_agent.PALocationResponse","title":"<code>PALocationResponse(ui_id, location)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, location: Location):\n    self.ui_id = ui_id\n    self.location = location\n</code></pre>"},{"location":"beta/api/#maoto_agent.PANewConversation","title":"<code>PANewConversation(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"beta/api/#maoto_agent.PAPaymentRequest","title":"<code>PAPaymentRequest(ui_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, payment_link: str):\n    self.ui_id = ui_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"beta/api/#maoto_agent.PAUrl","title":"<code>PAUrl(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"beta/api/#maoto_agent.PAUserMessage","title":"<code>PAUserMessage(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"beta/api/#maoto_agent.PAUserResponse","title":"<code>PAUserResponse(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"beta/api/#maoto_agent.PaymentRequest","title":"<code>PaymentRequest(actioncall_id, post_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, post_id: uuid.UUID, payment_link: str):\n    self.actioncall_id = actioncall_id\n    self.post_id = post_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"beta/api/#maoto_agent.Post","title":"<code>Post(post_id, time, description, context, apikey_id, resolved)</code>","text":"<p>               Bases: <code>NewPost</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, time: datetime, description: str, context: str, apikey_id: uuid.UUID, resolved: bool):\n    super().__init__(description, context)\n    self.post_id = post_id\n    self.time = time\n    self.apikey_id = apikey_id\n    self.resolved = resolved\n</code></pre>"},{"location":"beta/api/#maoto_agent.Response","title":"<code>Response(response_id, time, post_id, apikey_id, description)</code>","text":"<p>               Bases: <code>NewResponse</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, response_id: uuid.UUID, time: datetime, post_id: uuid.UUID, apikey_id: Optional[uuid.UUID], description: str):\n    super().__init__(post_id, description)\n    self.response_id = response_id\n    self.apikey_id = apikey_id\n    self.time = time\n</code></pre>"},{"location":"beta/api/#maoto_agent.Url","title":"<code>Url(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"beta/api/#maoto_agent.User","title":"<code>User(user_id, time, username, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, time: datetime, username: str, roles: list):\n    self.user_id = user_id\n    self.time = time\n    self.username = username\n    self.roles = roles\n</code></pre>"},{"location":"stable/api/","title":"Latest Stable Version","text":"<p>This section contains the latest stable release API documentation.</p>"},{"location":"stable/api/#maoto_agent.DATA_CHUNK_SIZE","title":"<code>DATA_CHUNK_SIZE = 1024 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"stable/api/#maoto_agent.Action","title":"<code>Action(action_id, time, apikey_id, name, parameters, description, tags, cost, followup)</code>","text":"<p>               Bases: <code>NewAction</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    super().__init__(name, parameters, description, tags, cost, followup)\n    self.action_id = action_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"stable/api/#maoto_agent.Actioncall","title":"<code>Actioncall(actioncall_id, apikey_id, time, action_id, post_id, parameters)</code>","text":"<p>               Bases: <code>NewActioncall</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, apikey_id: uuid.UUID, time: datetime, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    super().__init__(action_id, post_id, parameters)\n    self.apikey_id = apikey_id\n    self.actioncall_id = actioncall_id\n    self.time = time\n</code></pre>"},{"location":"stable/api/#maoto_agent.ApiKey","title":"<code>ApiKey(apikey_id, time, user_id, name, roles, url=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, url: str | None = None):\n    self.apikey_id = apikey_id\n    self.time = time\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n    self.url = url\n</code></pre>"},{"location":"stable/api/#maoto_agent.ApiKeyWithSecret","title":"<code>ApiKeyWithSecret(apikey_id, time, user_id, name, roles, value)</code>","text":"<p>               Bases: <code>ApiKey</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, apikey_id: uuid.UUID, time: datetime, user_id: uuid.UUID, name: str, roles: list, value: str):\n    super().__init__(apikey_id, time, user_id, name, roles)\n    self.value = value\n</code></pre>"},{"location":"stable/api/#maoto_agent.BidRequest","title":"<code>BidRequest(action_id, post)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post: Post):\n    self.action_id = action_id\n    self.post = post\n</code></pre>"},{"location":"stable/api/#maoto_agent.BidResponse","title":"<code>BidResponse(action_id, post_id, cost)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, cost: float):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.cost = cost\n</code></pre>"},{"location":"stable/api/#maoto_agent.File","title":"<code>File(file_id, time, apikey_id, extension)</code>","text":"<p>               Bases: <code>NewFile</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, file_id: uuid.UUID, time: datetime, apikey_id: uuid.UUID, extension: str):\n    super().__init__(extension)\n    self.file_id = file_id\n    self.time = time\n    self.apikey_id = apikey_id\n</code></pre>"},{"location":"stable/api/#maoto_agent.HistoryElement","title":"<code>HistoryElement(history_id, role, name, text, time, apikey_id, file_ids=None, tree_id=None, parent_id=None)</code>","text":"<p>               Bases: <code>NewHistoryElement</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, history_id: uuid.UUID, role: uuid.UUID, name: str, text: str, time: datetime, apikey_id: uuid.UUID | None, file_ids: list[uuid.UUID] = None, tree_id: uuid.UUID = None, parent_id: uuid.UUID = None):\n    super().__init__(text, tree_id, parent_id, apikey_id, role, file_ids, name)\n    self.history_id = history_id\n    self.time = time\n</code></pre>"},{"location":"stable/api/#maoto_agent.Location","title":"<code>Location(latitude, longitude)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, latitude: float, longitude: float):\n    self.latitude = latitude\n    self.longitude = longitude\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto","title":"<code>Maoto(logging_level=None, connection_mode='nat', db_connection=False)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logging_level=None, connection_mode: str = \"nat\", db_connection=False):\n    # Set up logging and debug mode\n    self._debug = os.getenv(\"DEBUG\", \"False\").lower() == \"true\" or os.getenv(\"MAOTO_DEBUG\", \"False\").lower() == \"true\"\n    # Set up logging\n    self._logging_level = logging_level if logging_level else logging.DEBUG if self._debug else logging.INFO\n    logging.basicConfig(level=self._logging_level, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    self.logger = logging.getLogger(__name__)\n    # Disable INFO logs for gql and websockets\n    logging.getLogger(\"gql\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n    logging.getLogger(\"websockets\").setLevel(logging.DEBUG if self._debug else logging.WARNING)\n\n    self._db_connection = db_connection\n    self._db_connection_pool = None\n    if self._db_connection:\n        # Environment variables for database connection\n        self._db_hostname = os.getenv(\"POSTGRES_HOST\")\n        self._db_name = os.getenv(\"POSTGRES_DB\")\n        self._db_username = os.getenv(\"POSTGRES_USER\")\n        self._db_user_password = os.getenv(\"POSTGRES_PASSWORD\")\n        self._db_port = os.getenv(\"POSTGRES_PORT\")\n\n        # Validate that all required env variables are set\n        if not all([self._db_hostname, self._db_name, self._db_username, self._db_user_password, self._db_port]):\n            raise EnvironmentError(\n                \"POSTGRES_HOST, POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD, and POSTGRES_PORT must be set\"\n            )\n\n        # Construct the PostgreSQL connection URL\n        self._database_url = (\n            f\"postgresql+asyncpg://{self._db_username}:{self._db_user_password}\"\n            f\"@{self._db_hostname}:{self._db_port}/{self._db_name}\"\n        )\n\n        # Create a connection pool\n        self._db_connection_pool = databases.Database(self._database_url)\n\n    self._schema = gql_server(\"\"\"\n        directive @auth on FIELD_DEFINITION\n\n        scalar Datetime\n        scalar JSON\n\n        input Actioncall {\n            actioncall_id: ID!\n            action_id: ID!\n            post_id: ID!\n            apikey_id: ID!\n            parameters: JSON\n            time: Datetime!\n        }\n\n        input Response {\n            response_id: ID!\n            post_id: ID!\n            description: String!\n            apikey_id: ID\n            time: Datetime!\n        }\n\n        input Post {\n            post_id: ID!\n            description: String!\n            context: String!\n            apikey_id: ID!\n            time: Datetime!\n            resolved: Boolean!\n        }\n\n        input BidRequest {\n            action_id: ID\n            post: Post\n        }\n\n        input PaymentRequest {\n            actioncall_id: ID\n            post_id: ID\n            payment_link: String\n        }\n\n        input Location {\n            latitude: Float\n            longitude: Float\n        }\n\n        input PALocationRequest {\n            ui_id: String\n        }\n\n        input PALocationResponse {\n            ui_id: String\n            location: Location\n        }\n\n        input PAUserMessage {\n            ui_id: String\n            text: String\n        }\n\n        input PAUserResponse {\n            ui_id: String\n            text: String\n        }\n\n        input PAPaymentRequest {\n            ui_id: String\n            payment_link: String\n        }\n\n        input PANewConversation {\n            ui_id: String\n        }\n\n        input PAUrl {\n            url: String                \n        }\n\n        type Query {\n            _dummy: String\n        }\n\n        type Mutation {\n            forwardActioncalls(actioncalls: [Actioncall!]!): [Boolean!]! @auth\n            forwardResponses(responses: [Response!]!): [Boolean!]! @auth\n            forwardBidRequests(bidrequests: [BidRequest!]!): [Boolean!]! @auth\n            forwardPaymentRequests(paymentrequests: [PaymentRequest!]!): [Boolean!]! @auth\n\n            forwardPALocationResponses(pa_locationresponses: [PALocationResponse!]!): [Boolean!]! @auth\n            forwardPALocationRequests(pa_locationrequests: [PALocationRequest!]!): [Boolean!]! @auth\n            forwardPAUserMessages(pa_usermessages: [PAUserMessage!]!): [Boolean!]! @auth\n            forwardPAUserResponses(pa_userresponses: [PAUserResponse!]!): [Boolean!]! @auth\n            forwardPAPaymentRequests(pa_paymentrequests: [PAPaymentRequest!]!): [Boolean!]! @auth\n            forwardPANewConversations(pa_newconversations: [PANewConversation!]!): [Boolean!]! @auth \n            forwardPAUrls(pa_urls: [PAUrl!]!): [Boolean!]! @auth          \n        }\n        \"\"\")\n\n    self.domain_mp = os.environ.get(\"DOMAIN_MP\", \"mp.maoto.world\")\n    self.domain_pa = os.environ.get(\"DOMAIN_PA\", \"pa.maoto.world\")\n\n    self._use_ssl = os.environ.get(\"USE_SSL\", \"true\").lower() == \"true\"\n    self._protocol = \"https\" if self._use_ssl else \"http\"\n    self._port_mp = os.environ.get(\"PORT_MP\", \"443\" if self._use_ssl else \"80\")\n    self._port_pa = os.environ.get(\"PORT_PA\", \"443\" if self._use_ssl else \"80\")\n\n    self._url_mp = self._protocol + \"://\" + self.domain_mp + \":\" + self._port_mp + \"/graphql\"\n    self._url_pa = self._protocol + \"://\" + self.domain_pa + \":\" + self._port_pa + \"/graphql\"\n\n    self._protocol_websocket = \"wss\" if self._use_ssl else \"ws\"\n    self._url_marketplace_subscription = self._url_mp.replace(self._protocol, self._protocol_websocket)\n\n    self._apikey_value = os.environ.get(\"MAOTO_API_KEY\")\n    if self._apikey_value in [None, \"\"]:\n        raise ValueError(\"API key is required. (Set MAOTO_API_KEY environment variable)\")\n\n\n    self._action_cache = []\n    self._id_action_map = {}\n\n    self._map_obj_to_handler_in_registry = {\n        Response: \"Response\",\n        Actioncall: \"Actioncall\",\n        BidRequest: \"BidRequest\",\n        PaymentRequest: \"PaymentRequest\",\n\n        PAPaymentRequest: \"PAPaymentRequest\",\n        PALocationRequest: \"PALocationRequest\",\n        PAUserMessage: \"PAUserMessage\",\n\n        PALocationResponse: \"PALocationResponse\",\n        PAUserResponse: \"PAUserResponse\",\n        PANewConversation: \"PANewConversation\",\n        PAUrl: \"PAUrl\",\n    }\n\n    self._handler_registry = {\n        \"CustomStartup\": None,\n        \"CustomShutdown\": None,\n\n        \"Response\": None,\n        \"Actioncall\": {},\n        \"Actioncall_fallback\": None,\n        \"PaymentRequest\": None,\n        \"BidRequest\": {},\n        \"BidRequest_fallback\": None,\n\n        \"PAPaymentRequest\": None,\n        \"PALocationResponse\": None,\n        \"PALocationRequest\": None,\n        \"PAUserMessage\": None,\n        \"PAUserResponse\": None,\n        \"PANewConversation\": None,\n        \"PAUrl\": None,\n    }\n\n    self._connection_mode = connection_mode\n    if self._connection_mode not in [\"marketplace\", \"no_nat\", \"nat\", \"closed\"]:\n        raise ValueError(\"Invalid connection mode.\")\n\n    # CLient to send messages to ui and personal assistant\n    self._graphql_service = self.GraphQLService(self, self._apikey_value)\n\n    # to send messages to marketplace\n    if self._connection_mode != \"closed\":\n        transport = AIOHTTPTransport(\n            url=self._url_mp,\n            headers={\"Authorization\": self._apikey_value},\n        )\n        self.client = Client(transport=transport, fetch_schema_from_transport=True)\n\n    if self._connection_mode == \"nat\":\n        self.server = self.EventDrivenQueueProcessor(self.logger, worker_count=1, scale_threshold=10, outer_class=self)\n    if self._connection_mode == \"no_nat\":\n        self.server = self.ServerMode(self.logger, self)\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.EventDrivenQueueProcessor","title":"<code>EventDrivenQueueProcessor(logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30, outer_class=None)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logger, worker_count=10, min_workers=1, max_workers=20, scale_threshold=5, scale_down_delay=30, outer_class=None):\n    self.outer_class = outer_class\n    self.task_queue = queue.Queue()\n    self.initial_worker_count = worker_count\n    self.max_workers = max_workers\n    self.min_workers = min_workers\n    self.scale_threshold = scale_threshold\n    self.workers = []\n    self.stop_event = threading.Event()\n    self.producer_thread = None\n    self.monitor_thread = None\n    self.completed_tasks = 0\n    self.error_count = 0\n    self.lock = threading.Lock()\n    self.last_scale_down_time = 0\n    self.scale_down_delay = scale_down_delay  # Minimum time (seconds) between scale-downs\n    self.logger = logger\n\n    atexit.register(self.cleanup)\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.EventDrivenQueueProcessor.cleanup","title":"<code>cleanup()</code>","text":"<p>Cleanup function to ensure graceful termination.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def cleanup(self):\n    \"\"\"Cleanup function to ensure graceful termination.\"\"\"\n    self.logger.info(\"Cleaning up...\")\n\n    self.stop_event.set()\n\n    # Wait for the producer thread to finish\n    if self.producer_thread:\n        self.producer_thread.join()\n\n    # Insert poison pills to stop worker threads\n    for _ in range(len(self.workers)):\n        self.task_queue.put(None)\n\n    # Wait for all worker threads to finish\n    for worker in self.workers:\n        worker.join()\n\n    # Wait for the monitor thread to finish\n    if self.monitor_thread:\n        self.monitor_thread.join()\n\n    if self.outer_class:\n        if self.outer_class._at_shutdown:\n            asyncio.run(self.outer_class._at_shutdown())\n\n    self.logger.info(\"All processes have been terminated gracefully.\")\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.ServerMode","title":"<code>ServerMode(logger, outer_class=None)</code>","text":"Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>def __init__(self, logger, outer_class=None):\n    self.logger = logger\n    self.outer_class = outer_class\n\n    # Resolver functions\n    self.query = QueryType()\n    self.mutation = MutationType()\n    self.subscription = SubscriptionType()\n\n    self.datetime_scalar = ScalarType(\"Datetime\")\n    @self.datetime_scalar.serializer\n    def serialize_datetime(value: datetime) -&gt; str:\n        return value.isoformat()\n    @self.datetime_scalar.value_parser\n    def parse_datetime_value(value: str) -&gt; datetime:\n        return parser.parse(value)\n\n    self.json_scalar = ScalarType(\"JSON\")\n    @self.json_scalar.serializer\n    def serialize_json(value: dict) -&gt; str:\n        return json.dumps(value)\n    @self.json_scalar.value_parser\n    def parse_json_value(value: str) -&gt; dict:\n        return json.loads(value)\n\n    @self.mutation.field(\"forwardActioncalls\")\n    async def forward_actioncalls(_, info, actioncalls: list[dict[str, object]]) -&gt; list[bool]:\n        actioncalls = [Actioncall(\n            actioncall_id=uuid.UUID(actioncall[\"actioncall_id\"]),\n            apikey_id=uuid.UUID(actioncall[\"apikey_id\"]),\n            time=datetime.fromisoformat(actioncall[\"time\"]),\n            action_id=uuid.UUID(actioncall[\"action_id\"]),\n            post_id=uuid.UUID(actioncall[\"post_id\"]),\n            parameters=actioncall[\"parameters\"],\n        ) for actioncall in actioncalls]\n\n        status = []\n        for actioncall in actioncalls:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(actioncall, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving actioncall: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardResponses\")\n    async def forward_responses(_, info, responses: list[dict[str, object]]) -&gt; list[bool]:\n        responses = [Response(\n            response_id=uuid.UUID(response[\"response_id\"]),\n            post_id=uuid.UUID(response[\"post_id\"]),\n            description=response[\"description\"],\n            apikey_id=uuid.UUID(response[\"apikey_id\"]) if \"apikey_id\" in response else None, #TODO why is this not send as None?\n            time=response[\"time\"],\n        ) for response in responses]\n\n        status = []\n        for response in responses:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(response, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving response: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardBidRequests\")\n    async def forward_bidrequests(_, info, bidrequests: list[dict[str, object]]) -&gt; list[bool]:\n        bidrequests = [BidRequest(\n            action_id=bidrequest[\"action_id\"],\n            post=Post(\n                post_id=uuid.UUID(bidrequest[\"post\"][\"post_id\"]),\n                description=bidrequest[\"post\"][\"description\"],\n                context=bidrequest[\"post\"][\"context\"],\n                apikey_id=uuid.UUID(bidrequest[\"post\"][\"apikey_id\"]),\n                time=datetime.fromisoformat(bidrequest[\"post\"][\"time\"]),\n                resolved=bidrequest[\"post\"][\"resolved\"],\n            )\n        ) for bidrequest in bidrequests]\n\n        status = []\n        for bidrequest in bidrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(bidrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving bid request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPaymentRequests\")\n    async def forward_paymentrequests(_, info, paymentrequests: list[dict[str, object]]) -&gt; list[bool]:\n        paymentrequests = [PaymentRequest(\n            actioncall_id=uuid.UUID(paymentrequest[\"actioncall_id\"]),\n            post_id=uuid.UUID(paymentrequest[\"post_id\"]),\n            payment_link=paymentrequest[\"payment_link\"],\n        ) for paymentrequest in paymentrequests]\n\n        status = []\n        for paymentrequest in paymentrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(paymentrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving payment request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAPaymentRequests\")\n    async def forward_paymentrequests(_, info, pa_paymentrequests: list[dict[str, object]]) -&gt; list[bool]:\n        paymentrequests = [PAPaymentRequest(\n            ui_id=pa_paymentrequest[\"ui_id\"],\n            payment_link=pa_paymentrequest[\"payment_link\"],\n        ) for pa_paymentrequest in pa_paymentrequests]\n\n        status = []\n        for paymentrequest in paymentrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(paymentrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving payment request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPALocationResponses\")\n    async def forward_locationresponses(_, info, pa_locationresponses: list[dict[str, object]]) -&gt; list[bool]:\n        locationresponses = [PALocationResponse(\n            ui_id=pa_locationresponse[\"ui_id\"],\n            location=Location(\n                latitude=pa_locationresponse[\"location\"][\"latitude\"],\n                longitude=pa_locationresponse[\"location\"][\"longitude\"],\n            )\n        ) for pa_locationresponse in pa_locationresponses]\n\n        status = []\n        for locationresponse in locationresponses:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(locationresponse, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving location response: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPALocationRequests\")\n    async def forward_locationrequests(_, info, pa_locationrequests: list[dict[str, object]]) -&gt; list[bool]:\n        locationrequests = [PALocationRequest(\n            ui_id=pa_locationrequest[\"ui_id\"],\n        ) for pa_locationrequest in pa_locationrequests]\n\n        status = []\n        for locationrequest in locationrequests:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(locationrequest, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving location request: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAUserMessages\")\n    async def forward_usermessages(_, info, pa_usermessages: list[dict[str, object]]) -&gt; list[bool]:\n        usermessages = [PAUserMessage(\n            ui_id=pa_usermessage[\"ui_id\"],\n            text=pa_usermessage[\"text\"],\n        ) for pa_usermessage in pa_usermessages]\n\n        status = []\n        for usermessage in usermessages:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(usermessage, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving user message: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAUserResponses\")\n    async def forward_userresponses(_, info, pa_userresponses: list[dict[str, object]]) -&gt; list[bool]:\n        userresponses = [PAUserResponse(\n            ui_id=pa_userresponse[\"ui_id\"],\n            text=pa_userresponse[\"text\"],\n        ) for pa_userresponse in pa_userresponses]\n\n        status = []\n        for userresponse in userresponses:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(userresponse, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving user response: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPANewConversations\")\n    async def forward_newconversations(_, info, pa_newconversations: list[dict[str, object]]) -&gt; list[bool]:\n        newconversations = [PANewConversation(\n            ui_id=pa_newconversation[\"ui_id\"],\n        ) for pa_newconversation in pa_newconversations]\n\n        status = []\n        for newconversation in newconversations:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(newconversation, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving new conversation: {e}\")\n                status.append(False)\n\n        return status\n\n    @self.mutation.field(\"forwardPAUrls\")\n    async def forward_paurl(_, info, pa_urls: list[dict[str, object]]) -&gt; list[bool]:\n        urls = [PAUrl(\n            url=pa_url[\"url\"],\n        ) for pa_url in pa_urls]\n\n        status = []\n        for url in urls:\n            try:\n                asyncio.create_task(self.outer_class._resolve_event(url, info.context['apikey']))\n\n                status.append(True)\n            except Exception as e:\n                self.logger.error(f\"Error resolving url: {e}\")\n                status.append(False)\n\n        return status\n\n    self.AuthDirective.configure(logger=self.logger, fetch_all=self.outer_class.fetch_all)\n\n    # Create the executable schema\n    self.schema = make_executable_schema(self.outer_class._schema, self.query, self.mutation, self.datetime_scalar, self.json_scalar, directives={\"auth\": self.AuthDirective})\n\n    self.graphql_app = GraphQL(\n        self.schema, \n        debug=self.outer_class._debug,\n    )\n\n    async def health_check(request):\n        return JSONResponse({\"status\": \"ok\"})\n\n    self.routes=[\n        Route(\"/graphql\", self.graphql_app.handle_request, methods=[\"GET\", \"POST\", \"OPTIONS\"]),\n        Route(\"/healthz\", health_check, methods=[\"GET\"]),\n    ]\n\n    self.middleware = [\n        Middleware(\n            TrustedHostMiddleware,\n            allowed_hosts=['maoto.world', '*.maoto.world', 'localhost', '*.svc.cluster.local', '*.amazonaws.com', '*.ngrok.app', '*.ngrok-free.app']\n        ),\n    ]\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.ServerMode.shutdown","title":"<code>shutdown()</code>  <code>async</code>","text":"<p>Actions to perform on application shutdown.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def shutdown(self):\n    \"\"\"\n    Actions to perform on application shutdown.\n    \"\"\"\n\n    if self.outer_class:\n        if self.outer_class._at_shutdown:\n            await self.outer_class._at_shutdown()\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.ServerMode.startup","title":"<code>startup()</code>  <code>async</code>","text":"<p>Actions to perform on application startup.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def startup(self):\n    \"\"\"\n    Actions to perform on application startup.\n    \"\"\"\n\n    if self.outer_class:\n        if self.outer_class._at_startup:\n            await self.outer_class._at_startup()\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.execute","title":"<code>execute(query, values=None)</code>  <code>async</code>","text":"<p>Execute an INSERT, UPDATE, or DELETE statement.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def execute(self, query, values=None):\n    \"\"\"Execute an INSERT, UPDATE, or DELETE statement.\"\"\"\n    try:\n        return await self._db_connection_pool.execute(query=query, values=values)\n    except asyncpg.exceptions.PostgresError as e:\n        self.logger.error(\"Database execution error: %s\", e)\n        raise GraphQLError(\"Database execution error.\")\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.fetch_all","title":"<code>fetch_all(query, values=None)</code>  <code>async</code>","text":"<p>Fetch multiple records from the database.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>async def fetch_all(self, query, values=None):\n    \"\"\"Fetch multiple records from the database.\"\"\"\n    try:\n        return await self._db_connection_pool.fetch_all(query=query, values=values)\n    except asyncpg.exceptions.PostgresError as e:\n        self.logger.error(\"Database error: %s\", e)\n        raise GraphQLError(\"Database error occurred.\")\n</code></pre>"},{"location":"stable/api/#maoto_agent.Maoto.transaction","title":"<code>transaction()</code>  <code>async</code>","text":"<p>Return an async context manager so that <code>async with agent.transaction(): ...</code> works.</p> Source code in <code>maoto_agent/maoto_agent.py</code> <pre><code>@asynccontextmanager\nasync def transaction(self):\n    \"\"\"\n    Return an async context manager so that\n    `async with agent.transaction(): ...` works.\n    \"\"\"\n    async with self._db_connection_pool.transaction():\n        # You can do any setup here if needed\n        yield\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewAction","title":"<code>NewAction(name, parameters, description, tags, cost, followup)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, name: str, parameters: str, description: str, tags: list[str], cost: float, followup: bool):\n    self.name = name\n    self.parameters = parameters\n    self.description = description\n    self.tags = tags\n    self.cost = cost\n    self.followup = followup\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewActioncall","title":"<code>NewActioncall(action_id, post_id, parameters)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, action_id: uuid.UUID, post_id: uuid.UUID, parameters: str):\n    self.action_id = action_id\n    self.post_id = post_id\n    self.parameters = parameters\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewApiKey","title":"<code>NewApiKey(user_id, name, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, name: str, roles: list):\n    self.user_id = user_id\n    self.name = name\n    self.roles = roles\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewFile","title":"<code>NewFile(extension)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, extension: str):\n    self.extension = extension\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewHistoryElement","title":"<code>NewHistoryElement(text, tree_id, parent_id=None, apikey_id=None, role=None, file_ids=None, name=None)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, text: str, tree_id: uuid.UUID, parent_id: uuid.UUID = None, apikey_id: uuid.UUID = None, role: str | None = None, file_ids: list[uuid.UUID] = None, name: str | None = None):\n    self.text = text\n    self.file_ids = file_ids if file_ids else []\n    self.tree_id = tree_id\n    self.parent_id = parent_id\n    self.apikey_id = apikey_id\n    self.role = role\n    self.name = name\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewPost","title":"<code>NewPost(description, context)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, description: str, context: str):\n    self.description = description\n    self.context = context\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewResponse","title":"<code>NewResponse(post_id, description)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, description: str):\n    self.post_id = post_id\n    self.description = description\n</code></pre>"},{"location":"stable/api/#maoto_agent.NewUser","title":"<code>NewUser(username, password, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, username: str, password: str, roles: list):\n    self.username = username\n    self.password = password\n    self.roles = roles\n</code></pre>"},{"location":"stable/api/#maoto_agent.PALocationRequest","title":"<code>PALocationRequest(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"stable/api/#maoto_agent.PALocationResponse","title":"<code>PALocationResponse(ui_id, location)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, location: Location):\n    self.ui_id = ui_id\n    self.location = location\n</code></pre>"},{"location":"stable/api/#maoto_agent.PANewConversation","title":"<code>PANewConversation(ui_id)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str):\n    self.ui_id = ui_id\n</code></pre>"},{"location":"stable/api/#maoto_agent.PAPaymentRequest","title":"<code>PAPaymentRequest(ui_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, payment_link: str):\n    self.ui_id = ui_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"stable/api/#maoto_agent.PAUrl","title":"<code>PAUrl(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"stable/api/#maoto_agent.PAUserMessage","title":"<code>PAUserMessage(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"stable/api/#maoto_agent.PAUserResponse","title":"<code>PAUserResponse(ui_id, text)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, ui_id: str, text: str):\n    self.ui_id = ui_id\n    self.text = text\n</code></pre>"},{"location":"stable/api/#maoto_agent.PaymentRequest","title":"<code>PaymentRequest(actioncall_id, post_id, payment_link)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, actioncall_id: uuid.UUID, post_id: uuid.UUID, payment_link: str):\n    self.actioncall_id = actioncall_id\n    self.post_id = post_id\n    self.payment_link = payment_link\n</code></pre>"},{"location":"stable/api/#maoto_agent.Post","title":"<code>Post(post_id, time, description, context, apikey_id, resolved)</code>","text":"<p>               Bases: <code>NewPost</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, post_id: uuid.UUID, time: datetime, description: str, context: str, apikey_id: uuid.UUID, resolved: bool):\n    super().__init__(description, context)\n    self.post_id = post_id\n    self.time = time\n    self.apikey_id = apikey_id\n    self.resolved = resolved\n</code></pre>"},{"location":"stable/api/#maoto_agent.Response","title":"<code>Response(response_id, time, post_id, apikey_id, description)</code>","text":"<p>               Bases: <code>NewResponse</code></p> Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, response_id: uuid.UUID, time: datetime, post_id: uuid.UUID, apikey_id: Optional[uuid.UUID], description: str):\n    super().__init__(post_id, description)\n    self.response_id = response_id\n    self.apikey_id = apikey_id\n    self.time = time\n</code></pre>"},{"location":"stable/api/#maoto_agent.Url","title":"<code>Url(url)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, url: str):\n    self.url = url\n</code></pre>"},{"location":"stable/api/#maoto_agent.User","title":"<code>User(user_id, time, username, roles)</code>","text":"Source code in <code>maoto_agent/app_types.py</code> <pre><code>def __init__(self, user_id: uuid.UUID, time: datetime, username: str, roles: list):\n    self.user_id = user_id\n    self.time = time\n    self.username = username\n    self.roles = roles\n</code></pre>"}]}